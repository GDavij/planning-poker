// <auto-generated />
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250427180842_ReturnCompositePrimaryKeyWithCorrectParticipantMapping")]
    partial class ReturnCompositePrimaryKeyWithCorrectParticipantMapping
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("Deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("Email");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsAdmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("Name");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId")
                        .HasName("PK_Accounts_AccountId");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Match", b =>
                {
                    b.Property<long>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MatchId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("Description");

                    b.Property<bool>("HasClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.HasKey("MatchId")
                        .HasName("PK_Matches_MatchId");

                    b.HasIndex("AccountId");

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsSpectating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsSpectating");

                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("SignalRConnectionId")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SignalRConnectionId");

                    b.HasKey("AccountId", "MatchId")
                        .HasName("PK_Participants_AccountId_MatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Participants", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<byte>("RoleId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Abbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Abbreviation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Name");

                    b.HasKey("RoleId")
                        .HasName("PK_Roles_RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = (byte)1,
                            Abbreviation = "PO",
                            Name = "Product Owner"
                        },
                        new
                        {
                            RoleId = (byte)2,
                            Abbreviation = "SM",
                            Name = "Scrum Master"
                        },
                        new
                        {
                            RoleId = (byte)3,
                            Abbreviation = "Dev",
                            Name = "Software Developer"
                        },
                        new
                        {
                            RoleId = (byte)4,
                            Abbreviation = "QA",
                            Name = "Quality Assurance"
                        },
                        new
                        {
                            RoleId = (byte)5,
                            Abbreviation = "UX/UI",
                            Name = "UX UI Designer"
                        },
                        new
                        {
                            RoleId = (byte)6,
                            Abbreviation = "BA",
                            Name = "Business Analyst"
                        },
                        new
                        {
                            RoleId = (byte)7,
                            Abbreviation = "PM",
                            Name = "Project Manager"
                        },
                        new
                        {
                            RoleId = (byte)8,
                            Abbreviation = "TL",
                            Name = "Tech Lead"
                        },
                        new
                        {
                            RoleId = (byte)9,
                            Abbreviation = "DevOps",
                            Name = "DevOps Engineer"
                        },
                        new
                        {
                            RoleId = (byte)10,
                            Abbreviation = "DS",
                            Name = "Data Scientist"
                        },
                        new
                        {
                            RoleId = (byte)11,
                            Abbreviation = "MLE",
                            Name = "Machine Learning Engineer"
                        },
                        new
                        {
                            RoleId = (byte)12,
                            Abbreviation = "SA",
                            Name = "Solutions Architect"
                        },
                        new
                        {
                            RoleId = (byte)13,
                            Abbreviation = "SE",
                            Name = "Software Engineer"
                        },
                        new
                        {
                            RoleId = (byte)14,
                            Abbreviation = "DBA",
                            Name = "Database Administrator"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Story", b =>
                {
                    b.Property<long>("StoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoryId"));

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("Name");

                    b.Property<short>("Order")
                        .HasColumnType("smallint")
                        .HasColumnName("Order");

                    b.Property<string>("StoryNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StoryNumber");

                    b.HasKey("StoryId")
                        .HasName("PK_Stories_StoryId");

                    b.HasIndex("MatchId");

                    b.ToTable("Stories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StoryPoint", b =>
                {
                    b.Property<long>("StoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("StoryId");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint")
                        .HasColumnName("MatchId");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountId");

                    b.Property<short>("Points")
                        .HasColumnType("smallint")
                        .HasColumnName("Points");

                    b.HasKey("StoryId", "MatchId", "AccountId")
                        .HasName("PK_StoryPoints_StoryId_MatchId_AccountId");

                    b.HasIndex("AccountId", "MatchId");

                    b.ToTable("StoryPoints", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Match", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Matches")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Matches_Accounts_AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Participants")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Participants_Accounts_AccountId");

                    b.HasOne("Domain.Entities.Match", "Match")
                        .WithMany("Participants")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Participants_Matches_MatchId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Participants")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Roles_Participants_RoleId");

                    b.Navigation("Account");

                    b.Navigation("Match");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Story", b =>
                {
                    b.HasOne("Domain.Entities.Match", "Match")
                        .WithMany("Stories")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Stories_Matches_MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Domain.Entities.StoryPoint", b =>
                {
                    b.HasOne("Domain.Entities.Story", "Story")
                        .WithMany("StoryPoints")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Participant", "Participant")
                        .WithMany("StoryPoints")
                        .HasForeignKey("AccountId", "MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Participant_StoryPoint_AccountId_StoryId");

                    b.Navigation("Participant");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Domain.Entities.Match", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Domain.Entities.Participant", b =>
                {
                    b.Navigation("StoryPoints");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Domain.Entities.Story", b =>
                {
                    b.Navigation("StoryPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
